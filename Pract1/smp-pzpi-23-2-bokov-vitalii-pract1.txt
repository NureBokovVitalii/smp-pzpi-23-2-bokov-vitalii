МІНІСТЕРСТВО ОСВІТИ І НАУКИ УКРАЇНИ ХАРКІВСЬКИЙ НАЦІОНАЛЬНИЙ УНІВЕРСИТЕТ РАДІОЕЛЕКТРОНІКИ


Кафедра Програмної інженерії




Звіт
з практичної роботи № 1
з дисципліни: «Скриптові мови програмування»
з теми: «Розробка інженерного рішення для друкування ялинки мовою Bash (Bourne again shell) з використанням циклів та галужень»







 
Виконав:
ст. гр. ПЗПІ-23-2
Боков В.В. 
 
Перевірила:к.т.н. доц. Каф ПІ
Груздо І. В.


 













Харків – 2025
 
1	РОЗРОБКА ІНЖЕНЕРНОГО РІШЕННЯ ДЛЯ ДРУКУВАННЯ ЯЛИНКИ МОВОЮ BASH (BOURNE AGAIN SHELL) З ВИКОРИСТАННЯМ ЦИКЛІВ
ТА ГАЛУЖЕНЬ
1.1	Мета роботи

Мета даної практичної роботи - здобути навички створення сценаріїв автоматизації засобами Bash (Bourne again shell).
1.2	Хід роботи

Метою роботи є створення сценарію мовою Bash, що друкуватиме на екрані ялинку із двох ярусів гілок, стовбура та шару снігу.
1.2.1	До сценарію є наступні вимоги:

а) Ялинка повинна бути симетричною по вертикальній осі.
б) Гілки ялинки формуються ярусами у вигляді правильних рівнобедрених трикутників, де кожен наступний рядок на 2 символи ширший за попередній, а символи у рядках чергуються між * і #.
в) Ширина кожного ярусу ялинки повинна бути на 2 символи меншою, ніж загальна ширина снігової основи.
г) Стовбур ялинки має бути висотою 2 рядки і шириною 3 символи, розташованою по центру.
д) Сніг — це один рядок, який йде внизу ялинки і визначає загальну ширину композиції.
е) Загальна висота ялинки (включно зі снігом) та ширина снігового шару передаються як параметри командного рядка при запуску скрипта.
ж) Усі параметри мають бути додатні числа.
и) Під час обробки значення слід округлювати вниз до найближчого цілого, якщо вони дробові.
к) Якщо з вказаних параметрів неможливо побудувати коректну ялинку, скрипт повинен вивести повідомлення про помилку в потік стандартних помилок і повернути ненульовий код завершення процесу.
л) у сценарії потрібно обов’язково використати функцію та такі конструкції;
1)	if ... then ... fi
 
2)	while ... do ... done
3)	until ... do ... done
4)	for ... in .. do ... done
5)	for ((...)); do ... done

1.2.2	Створимо сценарій дотримуючись вимог

Сценарій має починатися з першого рядка, у якому вказано шлях до інтерпретатора Bash — це потрібно, щоб система могла правильно виконати файл як програму. У цьому рядку зазначається, що для виконання слід використовувати Bash, який зазвичай знаходиться за адресою /bin/bash.
На початку виконання скрипт має перевірити передані параметри та, якщо потрібно, скоригувати їх. Аргументів повинно бути рівно два. Перший аргумент — це висота ялинки, другий — ширина шару снігу. Якщо кількість аргументів неправильна, скрипт має завершити роботу з повідомленням про помилку.
Є кілька важливих вимог до значень аргументів. Мінімально допустима висота — 8 рядків. Вона включає один рядок снігу, два рядки стовбура, один рядок верхівки та щонайменше чотири рядки гілок. Мінімальна допустима ширина шару снігу — 7 символів. Це значення на два символи більше за ширину гілок найменшої можливої ялинки. Після нормалізації ширина снігу завжди повинна перевищувати ширину гілок рівно на два символи.
Щоб переконатися, що аргументи відповідають цим умовам, скрипт повинен перевірити їх значення. Якщо висота є непарним числом, її потрібно зменшити на одиницю, щоб вона стала парною. Якщо ширина парна — її теж потрібно зменшити на одиницю, щоб вона стала непарною.
Далі потрібно обчислити ширину гілок. Для цього визначається висота одного ярусу як половина всієї висоти мінус один. Ширина гілок тоді обчислюється за формулою: два помножити на висоту ярусу мінус один. Цю ширину необхідно зберегти у змінну, оскільки вона знадобиться для подальших перевірок і побудови ялинки.
Якщо після всіх перевірок виявиться, що введені значення не дозволяють зобразити коректну ялинку, скрипт має повідомити про це, вивівши текст у стандартний потік помилок, і завершити роботу з кодом помилки, який відрізняється від нуля.

1 if (( $# != 2 )); then echo "Not enough/Too many arguments" >&2; exit 1; fi
2 if (( $1 < 8 )); then echo "Height must be > 7" >&2; exit 2; fi
3 if (( $2 < 7 )); then echo "Width must be > 6" >&2; exit 3; fi
4
5 h=$(( ($1 % 2 != 0) ? $1 - 1 : $1 ))
6 w=$(( ($2 % 2 == 0) ? $2 - 1 : $2 ))
7 lh=$(( $h/2 - 1 ))
8
9 if (( ($w-(2*$lh-1) != 2) )); then echo "Can't draw the tree with provided arguments" >&2; exit 4; fi
Гілки ялинки мають складатись з 2 символів, тому створимо змінну в якій будемо зберігати поточний символ.
Оголосимо функцію для малювання ярусу гілок ялинки. Ця функція буде малювати ярус ялинки рядок за рядком чергуючи символи. Створимо цикл який буде виконуватись стільки разів, скільки рядків необхідно для малювання одного ярусу ялинки, починаючи з 1 або 2 рядка в залежності від ярусу, що малюється. Використаємо раніше оголошену змінну, що зберігає висоту ярусу. Кожен рядок повинен починатись із відступу, для обчислення цього відступу необхідно від ширини шару снігу відняти ширину поточного рядка, та поділити результат на
2. Скористаємося можливістю команди «printf» друкувати текст вміщуючи його в вікно з пробілів визначеної довжини. Рядок із символів ми можемо надрукувати так само використавши «printf», але замінивши символи пробілів, на символи, що
відповідають поточному шару. Для цього скористаємося командою «tr». Наприкінці кола циклу змінимо символ на протилежний.
1 ch='*'
2
3 draw_layer() {
4		for ((i=$1; i <= lh; i++)); do
5		printf "%*s" "$(( (w - (2*i-1)) / 2 ))"
6		printf "%*s\n" "$(( 2*i-1 ))" | tr ' ' "$ch"
7		
8		ch=$( [ "$ch" = '*' ] && echo '#' || echo '*' )
9		done
10	}	
Стовбур ялинки завжди має однаковий вигляд, відрізняється лише відступ від початку рядку. Оголосимо функцію друку стовбура ялинки, скориставшись методами, що були використані для друку ярусів гілок.
1	draw_stem() {
2	for i in {0..1}; do
3	printf "%$(( (h - 3) / 2 ))s"
4	printf "%3s\n" | tr ' ' "#"
5	done
6 }
Шар снігу не має відступу, надрукувати його найпростіше. Оголосимо функцію друку шару снігу, скориставшись методами, що були використані в попередніх функціях.
1	draw_snow() {
2	printf "%${w}s\n" | tr ' ' "*"
3 }
Викличемо створені функції для друку ялинки.
1	draw_layer 1
2	draw_layer 2
3	draw_stem
4	draw_snow


1.3	Висновки

Під час виконання даної практичної роботи я навчився створювати сценарії автоматизації засобами Bash (Bourne again shell).





















ДОДАТОК А
Повний текст розробленого сценарію

1 #!/bin/bash
2
3 if (( $# != 2 )); then echo "Not enough/Too many arguments" >&2; exit 1; fi
4 if (( $1 < 8 )); then echo "Height must be > 7" >&2; exit 2; fi
5 if (( $2 < 7 )); then echo "Width must be > 6" >&2; exit 3; fi
6
7 h=$(( ($1 % 2 != 0) ? $1 - 1 : $1 ))
8 w=$(( ($2 % 2 == 0) ? $2 - 1 : $2 ))
9 lh=$(( $h/2 - 1 ))
10
11 if (( ($w-(2*$lh-1) != 2) )); then echo "Can't draw the tree with provided arguments" >&2; exit 4; fi
12
13
14 ch='*'
15
16 draw_layer() {
17	for ((i=$1; i <= lh; i++)); do
18	printf "%*s" "$(( (w - (2*i-1)) / 2 ))"
19	printf "%*s\n" "$(( 2*i-1 ))" | tr ' ' "$ch"
20
21	ch=$( [ "$ch" = '*' ] && echo '#' || echo '*' )
22	done
23 }
24
25	draw_stem() {
26	for i in {0..1}; do
27	printf "%$(( (h - 3) / 2 ))s"
28	printf "%3s\n" | tr ' ' "#"
29	done
30 }
31
32	draw_snow() {
33	printf "%${w}s\n" | tr ' ' "*"
34 }
35
36	draw_layer 1
37	draw_layer 2
38	draw_stem
39	draw_snow
40
41 i=0
42	while [[ $i -ne 1 ]]; do i=$((i+1)); done
43	until [[ $i -eq 2 ]]; do i=$((i+1)); done
44

